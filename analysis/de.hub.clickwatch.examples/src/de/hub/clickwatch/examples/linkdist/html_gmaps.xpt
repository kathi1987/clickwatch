«IMPORT ldp»
«IMPORT SpecificMetaModel»

«EXTENSION de::hub::clickwatch::examples::linkdist::analysis»
«EXTENSION de::hub::clickwatch::examples::linkdist::format»

«DEFINE Main FOR Network»
«LET distanceQualityPlot() AS plot»
«FILE "output.html"-»
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <title>HWL Outdoor Nodes</title>
    <script src="http://maps.google.com/maps?file=api&amp;v=2&amp;sensor=false&amp;key=ABQIAAAAJLpOq7-D6Pxtv3KwixdTgRSlSGVEMga0amhFtwmZepFMkUnhzBRAMVJkBKv0djRGQMODSufss_hDHw" type="text/javascript"></script>
    <script type="text/javascript">

    function initialize() {
      	if (GBrowserIsCompatible()) {
	        var map = new GMap2(document.getElementById("map_canvas"));
	        //map.setCenter(new GLatLng(52.504841,13.331516), 14);
		    map.addControl(new GSmallMapControl());
		    map.addControl(new GMapTypeControl());
	    
	        // Add 10 markers to the map at random locations
	        //var bounds = map.getBounds();
	
	        // Define the two corners of the bounding box 
			var ne = new GLatLng(52.432521+0.001,13.532865);
			var sw = new GLatLng(52.42856,13.52715+0.001);
		
			// Create a bounding box  
			var bounds = new GLatLngBounds(sw,ne);
		
			//Center map in the center of the bounding box and calculate the appropriate zoom level
			map.setCenter(bounds.getCenter(), map.getBoundsZoomLevel(bounds));
			
			var xIcon;
			var marker;
«FOREACH all_nodes() AS node-»
«LET node.gps.gps_coord.gps AS gps-»
«IF gps.lat != "0.0" && gps.long != "0.0"-»
			xIcon = new GIcon(G_DEFAULT_ICON);
«IF node.hwbusy() < 10-»
			xIcon.image = "wifi1.png";
«ELSEIF  node.hwbusy() <= 30-»
			xIcon.image = "wifi2.png";
«ELSE-»
			xIcon.image = "wifi3.png";
«ENDIF-»
			xIcon.iconSize=new GSize(32,37);
			marker = new GMarker(new GLatLng(«gps.lat», «gps.long»), { icon:xIcon });
			GEvent.addListener(marker, "click", function() {
				map.openInfoWindowTabsHtml(new GLatLng(«gps.lat», «gps.long»), new Array(new GInfoWindowTab("Node info",
	  				"IP: «node.iNetAdress»<br/>Node: «node.address()»<br/>Hw_busy: «node.hwbusy()»")), {});
	  		});
	  		map.addOverlay(marker);
	  		
«ENDIF-»
«ENDLET-»
«ENDFOREACH-»
		
			var polyline
«FOREACH plot.links AS link-»
«LET node(link.srcAddr).gps.gps_coord.gps AS srcGps-»
«LET node(link.destAddr).gps.gps_coord.gps AS destGps-»
			polyline = new GPolyline(new Array(new GLatLng(«srcGps.lat», «srcGps.long»), new GLatLng(«destGps.lat», «destGps.long»)),
				"#FF0000", «log10(""+link.rssi)», «if (link.rssi/64.0 < 0.6) then 0.6 else (link.rssi/64)», {});
			GEvent.addListener(polyline, "click", function() {
	  			map.openInfoWindowTabsHtml(new GLatLng(«srcGps.lat», «srcGps.long»), new Array(new GInfoWindowTab("Link info",
	  					"Length: «link.distance» m<br/>RSSI: «link.rssi»")), {});
	  		});
			map.addOverlay(polyline);
«ENDLET-»
«ENDLET-»
«ENDFOREACH-»		       
	   	}
    }  
    </script>
  </head>

  <body onload="initialize()" onunload="GUnload()" style="font-family: Arial;border: 0 none;">
    <div id="map_canvas" style="width: 2000px; height: 1400px"></div>
  </body>
</html>
«ENDFILE»
«ENDLET»
«ENDDEFINE»