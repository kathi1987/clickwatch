
import SpecificMetaModel;

all_nodes(Network network):
	network.nodes;
	
links(Network network):
	network.all_nodes().collect(n|n.device_wifi.link_stat.bcast_stats.entry.link).flatten();
	
from(link l):
	l.eContainer_entry.from;
	
to(link l):
	l.to;
	
cached node(Network network, String address):
	network.all_nodes().select(n|n.device_wifi.link_stat.bcast_stats.entry.from == address).first();

cached reverse_link_info(Network network, link_info li):
	let toAddr = li.eContainer_link.to:
	let fromAddr = li.eContainer_link.eContainer_entry.from:
	let toNode = node(network, toAddr): 
		toNode.device_wifi.link_stat.bcast_stats.entry.link.select(l| l.to == fromAddr &&
				l.link_info.rate == li.rate && l.link_info.size == li.size).first().link_info;
				
cached cst_stats(Network network, String addr):
	node(network, addr).device_wifi.wifidevice.cst.stats_xml;

rssi(Network network, String fromAddr, String toAddr):
	cst_stats(network, fromAddr).channelstats.rssi.nb.select(nb|nb.addr == toAddr).first().rssi;
		
hwbusy(Network network, String addr):
	cst_stats(network, addr).channelstats.phy.hwbusy;
	
noise(Network network, String addr):
	cst_stats(network, addr).channelstats.phy.avg_noise;