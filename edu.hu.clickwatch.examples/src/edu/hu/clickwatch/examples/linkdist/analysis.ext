
import SpecificMetaModel;
import ldp;

Real plain_distance(String lat1, String lon1, String lat2, String lon2):
   JAVA edu.hu.clickwatch.examples.linkdist.GeoUtil.vincentyDistance(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
   
Real distance(String lat1, String lon1, String lat2, String lon2):
	if (lat1 == null || lon1 == null || lat2 == null || lon2 == null) then 0 else
		plain_distance(lat1, lon1, lat2, lon2);

all_nodes(Network network):
	network.nodes;
	
address(Node node):
	node.device_wifi.link_stat.bcast_stats.entry.from;
	
hwbusy(Node node):
	node.device_wifi.wifidevice.cst.stats_xml.channelstats.phy.hwbusy;

cached node(Network network, String address):
	network.all_nodes().select(n|n.address() == address).first();

link(Network network, String addr1, String addr2):
	let result = new ldp::Link:
	let n1 = network.node(addr1):
	let n2 = network.node(addr2):
	let gps1 = n1.gps.gps_coord.gps:
	let gps2 = n2.gps.gps_coord.gps:
	let distance = distance(gps1.lat, gps1.long, gps2.lat, gps2.long):
	let rssi = n1.device_wifi.wifidevice.cst.stats_xml.channelstats.rssi.nb.select(e|e.addr == addr2).first().rssi:
	result.setSrcAddr(addr1) -> result.setDestAddr(addr2) -> 
	result.setDistance(distance) -> 
	if (rssi != null) then result.setRssi(rssi) -> result;

links(Network network, Node node):
	let entry = node.device_wifi.link_stat.bcast_stats.entry:
	let srcAddr = entry.from:
	entry.link.collect(e|network.link(srcAddr, e.to));

links(Network network):
	network.all_nodes().collect(e|network.links(e)).flatten();
	   
distanceQualityPlot(Network network):
	let plot = new Plot: plot.links.addAll(network.links().select(link|link.distance > 0 && link.distance < 2000 && link.rssi > 0 && link.rssi < 64)) -> plot;
	
performAnalysis(Network network):
	network.distanceQualityPlot();
