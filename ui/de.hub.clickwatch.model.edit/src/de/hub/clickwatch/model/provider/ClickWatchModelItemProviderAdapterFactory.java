/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.hub.clickwatch.model.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import de.hub.clickwatch.model.util.ClickWatchModelAdapterFactory;


/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ClickWatchModelItemProviderAdapterFactory extends ClickWatchModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public ClickWatchModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemColorProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
     * This keeps track of the one adapter used for all {@link de.hub.clickwatch.model.Node} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected NodeItemProvider nodeItemProvider;

	/**
     * This creates an adapter for a {@link de.hub.clickwatch.model.Node}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createNodeAdapter() {
        if (nodeItemProvider == null) {
            nodeItemProvider = new NodeItemProvider(this);
        }

        return nodeItemProvider;
    }

	/**
     * This keeps track of the one adapter used for all {@link de.hub.clickwatch.model.Element} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected ElementItemProvider elementItemProvider;

	/**
     * This creates an adapter for a {@link de.hub.clickwatch.model.Element}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createElementAdapter() {
        if (elementItemProvider == null) {
            elementItemProvider = new ElementItemProvider(this);
        }

        return elementItemProvider;
    }

	/**
     * This keeps track of the one adapter used for all {@link de.hub.clickwatch.model.Handler} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected HandlerItemProvider handlerItemProvider;

	/**
     * This creates an adapter for a {@link de.hub.clickwatch.model.Handler}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createHandlerAdapter() {
        if (handlerItemProvider == null) {
            handlerItemProvider = new HandlerItemProvider(this);
        }

        return handlerItemProvider;
    }

	/**
     * This keeps track of the one adapter used for all {@link de.hub.clickwatch.model.Network} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected NetworkItemProvider networkItemProvider;

	/**
     * This creates an adapter for a {@link de.hub.clickwatch.model.Network}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createNetworkAdapter() {
        if (networkItemProvider == null) {
            networkItemProvider = new NetworkItemProvider(this);
        }

        return networkItemProvider;
    }

	/**
     * This keeps track of the one adapter used for all {@link de.hub.clickwatch.model.StatisticsContainer} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StatisticsContainerItemProvider statisticsContainerItemProvider;

    /**
     * This creates an adapter for a {@link de.hub.clickwatch.model.StatisticsContainer}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStatisticsContainerAdapter() {
        if (statisticsContainerItemProvider == null) {
            statisticsContainerItemProvider = new StatisticsContainerItemProvider(this);
        }

        return statisticsContainerItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EStringToStatisticMapItemProvider eStringToStatisticMapItemProvider;

    /**
     * This creates an adapter for a {@link java.util.Map.Entry}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEStringToStatisticMapAdapter() {
        if (eStringToStatisticMapItemProvider == null) {
            eStringToStatisticMapItemProvider = new EStringToStatisticMapItemProvider(this);
        }

        return eStringToStatisticMapItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.hub.clickwatch.model.Statistic} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StatisticItemProvider statisticItemProvider;

    /**
     * This creates an adapter for a {@link de.hub.clickwatch.model.Statistic}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStatisticAdapter() {
        if (statisticItemProvider == null) {
            statisticItemProvider = new StatisticItemProvider(this);
        }

        return statisticItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.hub.clickwatch.model.Error} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ErrorItemProvider errorItemProvider;

    /**
     * This creates an adapter for a {@link de.hub.clickwatch.model.Error}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createErrorAdapter() {
        if (errorItemProvider == null) {
            errorItemProvider = new ErrorItemProvider(this);
        }

        return errorItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

	/**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

	/**
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

	/**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

	/**
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

	/**
     * This adds a listener.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

	/**
     * This removes a listener.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

	/**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

	/**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	public void dispose() {
        if (nodeItemProvider != null) nodeItemProvider.dispose();
        if (elementItemProvider != null) elementItemProvider.dispose();
        if (handlerItemProvider != null) handlerItemProvider.dispose();
        if (networkItemProvider != null) networkItemProvider.dispose();
        if (statisticsContainerItemProvider != null) statisticsContainerItemProvider.dispose();
        if (eStringToStatisticMapItemProvider != null) eStringToStatisticMapItemProvider.dispose();
        if (statisticItemProvider != null) statisticItemProvider.dispose();
        if (errorItemProvider != null) errorItemProvider.dispose();
    }

}
